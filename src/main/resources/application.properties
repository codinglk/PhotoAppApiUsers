server.port=${PORT:0}
spring.application.name=photo-app-api-users
eureka.client.serviceUrl.defaultZone = http://localhost:8010/eureka
spring.devtools.restart.enabled = true
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

spring.datasource.url=jdbc:mysql://localhost:3306/photo_app?serverTimezone=UTC
spring.datasource.username=codinglk
spring.datasource.password=codinglk
spring.jpa.hibernate.ddl-auto=update

spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true

#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

gateway.ip = 192.168.1.34

# In this example we are creating token for 10 days, You can set this value as you want
token.expiration_time = 864000000
token.secret = csdiorwejowobsocodinglkfsdsdsddsomn
login.url.path = /users/login

# Where: localhost:8012 is a domain and port on which Config Server is running.
# The first priority is config server application.properties file to load the properties and if the property is not found in config server
# then will check in local application.properties file
#spring.config.import=optional:configserver:http://192.168.1.33:8012

# rabbitmq details
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#management.endpoints.web.exposure.include=mappings
# Add below properties for Resilience4j
management.endpoints.web.exposure.include=*
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true



logging.level.com.codinglk.photoapp.api.user.data.AlbumsServiceClient=DEBUG

# for netflix-hystrix
# feign.circuitbreaker.enabled=true

# for Resilience4j
# Highest the aspect-order number, the priority is also high to run
resilience4j.circuitbreaker.circuit-breaker-aspect-order=1
resilience4j.circuitbreaker.instances.photo-app-api-albums.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.photo-app-api-albums.automatic-transition.from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.photo-app-api-albums.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.photo-app-api-albums.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.photo-app-api-albums.sliding-window-size=2
resilience4j.circuitbreaker.instances.photo-app-api-albums.minimum-number-of-calls=1
resilience4j.circuitbreaker.instances.photo-app-api-albums.event-consumer-buffer-size=10

# Highest the aspect-order number, the priority is also high to run
resilience4j.retry.retry-aspect-order=2
# max attempt
resilience4j.retry.instances.photo-app-api-albums.max-attempts=3
# It will wait for 2s before next attempt
resilience4j.retry.instances.photo-app-api-albums.wait-duration=2s
# It will enable the exponential-backoff, after 1st attempt failed then next attempt will be done in ( 2s * 5 = 10s) and so on
resilience4j.retry.instances.photo-app-api-albums.enable-exponential-backoff=true
resilience4j.retry.instances.photo-app-api-albums.exponential-backoff-multiplier=5

# Adding spring-cloud-sleuth-zipkin
spring.zipkin.base-url=http://localhost:9411
spring.zipkin.sender.type=web
# 1 to send 100% information, .1 to send 10% information
spring.sleuth.sampler.probability=1

# It will create the file in project root folder, we can also provide the complete path where we want to save it.
# Configure Microservices to Log into a File
logging.file.name=photo-app-api-users.log